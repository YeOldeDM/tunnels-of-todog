extends Node2D

signal game_time_changed()

signal write_to_console( what )

#onready var DATABASE = preload("res://global/DATABASE.tscn").instance()

onready var map = $FloorMap
onready var fog = $FogMap
onready var inv = $Inventory

#onready var things = []	#Populated by Thing Node refs,
## generated by create_thing() and removed by destroy_thing()
#
#var player

var explored_cells = PoolVector2Array()
var seen_cells = PoolVector2Array()

	# PUBLIC FUNCS #

# Creates an instance of a Thing from the DATABASE
# Use with spawn_thing() to place it in the dungeon
#func create_thing( database_path:String )->Node:
#	var new_thing: Node = DATABASE.grab( database_path )
#	things.append( new_thing )
#	return new_thing
#
#func destroy_thing( thing:Node )->void:
#	things.remove( things.find( thing ) )
#	thing.queue_free()


# Puts a thing made with create_thing() into the dungeon at a position
func spawn_thing( thing:Node, at_pos:Vector2 )->void:
	map.add_child( thing )
	thing.on_map = true
	thing.cell = at_pos
	
	

func spawn_player( at_pos:Vector2 = Vector2() )->Node:
	
	# Get a Player Thing
	var player = RPG.create_thing( "Player" )
	
	# Add it to the map
	map.add_child( player )
	player.on_map = true
	# Set up the player
	player.cell = at_pos
	
#	player.connect("spawns", self, "_on_thing_spawns" )
#	player.connect( "despawns", self, "_on_thing_despawns" )
	
	player.seen = true
	player.connect( "stepped", self, "_on_player_stepped" )
	player.comp["player"].connect( "player_acted", self, "_on_player_acted" )
	return player

func thing_to_inventory( thing )->void:
	if thing.get_parent():
		thing.get_parent().remove_child( thing )
	inv.add_child( thing )
	thing.on_map = false

func get_things_at_cell( at_cell:Vector2 )->Array:
	var result:Array = []
	for thing in get_tree().get_nodes_in_group("things"):
		if thing.on_map:
			if thing.cell == at_cell:
				result.append(thing)
	return result

func paint_dungeon( mapdata ):
	for x in mapdata.size():
		for y in mapdata[x].size():
			map.set_cell( x, y, mapdata[x][y] )
			fog.set_cell( x, y, 0 )



	# PRIVATE FUNCS #

func _tick( delta ):
	RPG.GAME_TIME += delta
	emit_signal("game_time_changed")

func _ready():
	RPG.MAP_DATA = FLOORGEN.Generate()
	paint_dungeon( RPG.MAP_DATA.map )
	
	# Create Player
	var p = spawn_player( Vector2( RPG.MAP_DATA.start_x, RPG.MAP_DATA.start_y ) )
	
	
#	# Create test Things
#	var ap = create_thing("Apple")
#	map.add_child(ap)
#	ap.cell = p.cell
#
#	var stairs = create_thing("DownStairs")
#	map.add_child(stairs)
#	stairs.cell = p.cell + Vector2(0,1)
	
	# Bootstrap initial FOV
	p.emit_signal( "stepped", p.cell )
	RPG.player = p
	MSG.send_message( "Welcome to the Tunnels.." )

# Signal Callbacks

func _on_player_acted( action_idx ):
	match action_idx:
		HERO.ACTION.MOVE:
			pass # movement ticks are handled by _on_player_stepped()?
		HERO.ACTION.WAIT:
			_tick( HERO.WAIT_TIME )
		HERO.ACTION.GRAB:
			var stuff = get_things_at_cell( RPG.player.cell )
			for thing in stuff:
				if thing.is_in_group("items"):
#					thing.comp["item"].pickup()
					thing_to_inventory( thing )
					MSG.send_message( "You pick up "+thing.get_context_name() )
					_tick( 2 )
					

func _on_player_stepped( to_cell ):
	var blocking_things = PoolVector2Array()
	for thing in get_tree().get_nodes_in_group( "sight_blockers" ):
		if thing.on_map:
			blocking_things.append( thing.cell )
	seen_cells = FOV.calculate_fov( RPG.MAP_DATA.map, 1, to_cell, 5, blocking_things )
	for c in seen_cells: # Remove fog from seen cells
		fog.set_cellv( c, -1 )
		if not c in explored_cells: # prevent duplicate cells
			explored_cells.append( c )
	for c in explored_cells: # Grey out all explored cells that are unseen
		if not c in seen_cells:
			fog.set_cellv( c, 1 )
	
	for thing in get_tree().get_nodes_in_group("things"):
		thing.seen = thing.cell in seen_cells 
	
	_tick( HERO.MOVE_SPEED )
	
	
	
	
	



func _on_DevConsole_command( parsed_text ):
	var cmd = parsed_text[0]
	match cmd:
		"spawn":
			var p = RPG.player
			var t = parsed_text[1]
			var x = int( parsed_text[2] )
			var y = int( parsed_text[3] )
			var thing = RPG.create_thing( t )
			if thing:
				spawn_thing( thing, p.cell + Vector2(x,y) )
			else:
				emit_signal( "write_to_console", "No '"+t+"' found in Database!" )
		"quit":
			get_parent().quit_game()
			
		_:
			emit_signal( "write_to_console", "Unknown command: "+cmd )
			
			
			
			
			
