extends Node2D


onready var DATABASE = preload("res://global/DATABASE.tscn").instance()

onready var map = $FloorMap
onready var fog = $FogMap

onready var things = []	#Populated by Thing Node refs,
# generated by create_thing() and removed by destroy_thing()


var explored_cells = PoolVector2Array()

	# PUBLIC FUNCS #


func create_thing( database_path )->Node:
	var new_thing: Node = DATABASE.grab( database_path )
	things.append( new_thing )
	return new_thing

func destroy_thing( thing ):
	things.remove( things.find( thing ) )
	thing.queue_free()




func spawn_player( at_pos:Vector2 = Vector2() )->Node:
	
	# Get a Player Thing
	var player = create_thing( "Player" )
	
	# Add it to the map
	map.add_child( player )
	
	# Set up the player
	player.cell = at_pos
	
#	player.connect("spawns", self, "_on_thing_spawns" )
#	player.connect( "despawns", self, "_on_thing_despawns" )
	
	player.seen = true
	player.connect( "stepped", self, "_on_player_stepped" )
	return player

func paint_dungeon( mapdata ):
	for x in mapdata.size():
		for y in mapdata[x].size():
			map.set_cell( x, y, mapdata[x][y] )
			fog.set_cell( x, y, 0 )



	# PRIVATE FUNCS #



func _ready():
	RPG.MAP_DATA = FLOORGEN.Generate()
	paint_dungeon( RPG.MAP_DATA.map )
	
	var p = spawn_player( Vector2( RPG.MAP_DATA.start_x, RPG.MAP_DATA.start_y ) )
	p.emit_signal( "stepped", p.cell )
	
#	var ap = create_thing("Item/Apple")
#	map.add_child(ap)
#	ap.cell = Vector2( 14,7 )
#
#	for t in things:
#		prints( t.Name, t.object_layer )

# Signal Callbacks

func _on_player_stepped( to_cell ):
	var seen_cells = FOV.calculate_fov( RPG.MAP_DATA.map, 1, to_cell, 6 )
	for c in seen_cells:
		fog.set_cellv( c, -1 )
		explored_cells.append( c )
	for c in explored_cells:
		if not c in seen_cells:
			fog.set_cellv( c, 1 )
	
	
	
	
	
	
	

